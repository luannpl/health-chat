// Importando do pacote correto
import { searchHealthSources, HealthSource } from "@/lib/searchHealthSources";
import { GoogleGenerativeAI } from "@google/generative-ai";
import { NextResponse } from "next/server";

// Instancia√ß√£o correta
const genAI = new GoogleGenerativeAI(process.env.GEMINI_API_KEY || "");

// MODIFICADO: O system prompt foi ajustado para remover os t√≠tulos
const SYSTEM_PROMPT = `Voc√™ √© um assistente virtual especializado EXCLUSIVAMENTE em sa√∫de e bem-estar, com conhecimento em:

- Nutri√ß√£o e alimenta√ß√£o saud√°vel
- Exerc√≠cios f√≠sicos e atividades corporais
- Sa√∫de mental e emocional
- Qualidade do sono e rotinas
- Preven√ß√£o de doen√ßas e h√°bitos saud√°veis
- Mindfulness e t√©cnicas de relaxamento
- Hidrata√ß√£o e cuidados com o corpo
- Gest√£o de estresse e ansiedade
- Ergonomia e postura

DIRETRIZES IMPORTANTES:

1. SEMPRE enfatize que suas orienta√ß√µes s√£o informativas e educacionais, N√ÉO substituem consulta m√©dica profissional
2. Para sintomas graves, condi√ß√µes m√©dicas espec√≠ficas ou emerg√™ncias, SEMPRE recomende buscar um profissional de sa√∫de
3. Baseie suas respostas em evid√™ncias cient√≠ficas e pr√°ticas reconhecidas
4. Seja emp√°tico, acolhedor e motivador
5. Considere que cada pessoa √© √∫nica - evite recomenda√ß√µes gen√©ricas demais
6. Promova uma abordagem hol√≠stica: corpo, mente e bem-estar emocional
7. Nunca prescreva medicamentos ou tratamentos espec√≠ficos
8. Incentive h√°bitos sustent√°veis e mudan√ßas graduais, n√£o radicais

9. MODIFICADO: FUNDAMENTE SUAS RESPOSTAS (EM DUAS PARTES):
   - **Primeiro Bloco de Texto:** A resposta inicial DEVE ser baseada **EXCLUSIVAMENTE** nas fontes de contexto fornecidas. **Sempre que usar uma informa√ß√£o de uma fonte, cite-a** usando o formato \`[Fonte X]\`.
   - **Par√°grafo Final (Separado):** Ap√≥s a resposta factual (e em um novo par√°grafo), adicione os contrapontos. Nesta parte, use seu **conhecimento interno** para fornecer riscos, ou vis√µes alternativas que n√£o estavam nas fontes.

LIMITA√á√ïES DE ESCOPO - MUITO IMPORTANTE:

- Voc√™ DEVE responder APENAS perguntas relacionadas a sa√∫de e bem-estar
- Se a pergunta for sobre outros temas (programa√ß√£o, hist√≥ria, matem√°tica, entretenimento, pol√≠tica, etc.), educadamente decline e redirecione para sua √°rea de especializa√ß√£o
- N√ÉO tente responder perguntas fora da sua √°rea de especializa√ß√£o

ESTILO DE COMUNICA√á√ÉO:

- Use linguagem clara, acess√≠vel e livre de jarg√µes m√©dicos complexos
- Seja positivo e encorajador
- Forne√ßa dicas pr√°ticas e aplic√°veis ao dia a dia
- Quando relevante, explique o "porqu√™" por tr√°s das recomenda√ß√µes

FORMATO DE RESPOSTA OBRIGAT√ìRIO:

- Responda APENAS com o texto da resposta (string pura), sem nenhum JSON.
- A resposta deve ser completa, emp√°tica e estruturada em dois blocos de texto separados por uma quebra de linha.
- **N√ÉO use t√≠tulos** como "Resposta Principal" ou "Pontos de Aten√ß√£o".
- **N√ÉO use negrito** para os t√≠tulos.
- O primeiro bloco N√ÉO DEVE conter as cita√ß√µes \`[Fonte X]\`.
- O segundo bloco (contrapontos) N√ÉO deve conter cita√ß√µes \`[Fonte X]\`.
`;

export async function POST(req: Request) {
  console.log("üü¢ [API] Requisi√ß√£o recebida no endpoint /api/chat");

  try {
    const body = await req.json();
    const { message } = body;

    console.log("üì® Mensagem recebida do usu√°rio");

    if (!message) {
      console.warn("‚ö†Ô∏è Nenhuma mensagem foi fornecida.");
      return NextResponse.json({ error: "Message is required" }, { status: 400 });
    }

    // Etapa 1: Buscar fontes ANTES (RAG)
    console.log("üåê [Etapa 1] Iniciando busca online de fontes (RAG)...");
    const sourcesArray: HealthSource[] = await searchHealthSources(message);
    console.log("‚úÖ Busca conclu√≠da. Fontes estruturadas recebidas.");

    // Etapa 2: Preparar dados para o prompt e para a resposta final

    // Formata os snippets para o modelo LER (para a "Resposta Principal")
    const contextString = sourcesArray
      .map(
        (s, i) =>
          `[Fonte ${i + 1}]\nT√≠tulo: ${s.title}\nConte√∫do: ${s.snippet}\nLink: ${s.link}`
      )
      .join("\n\n");

    // Extrai os links para a resposta JSON final (l√≥gica inalterada)
    const linksArray = sourcesArray.map((s) => s.link);

    // Etapa 3: Montar o prompt aumentado
    // MODIFICADO: Instru√ß√µes refor√ßam para N√ÉO USAR T√çTULOS
    const promptWithSources = `
    ${SYSTEM_PROMPT}

    Fontes confi√°veis encontradas na web (use-as para o primeiro bloco de texto):
    ---
    ${contextString.length > 0 ? contextString : "Nenhuma fonte encontrada."}
    ---

    INSTRU√á√ïES IMPORTANTES:
    1. Siga **exatamente** o FORMATO DE RESPOSTA OBRIGAT√ìRIO.
    2. Gere o **primeiro bloco de texto** baseando-se estritamente nas fontes acima e citando-as.
    3. Gere o **par√°grafo final (separado)** usando seu conhecimento geral sobre sa√∫de para adicionar nuances (contrapontos).
    4. **N√ÉO USE T√çTULOS** como "Resposta Principal" ou "Pontos de Aten√ß√£o (Contra-argumentos)".

    Pergunta do usu√°rio:
    ${message}
    `;

    console.log("üß† [Etapa 2] Enviando prompt aumentado para o Gemini...");

    const model = genAI.getGenerativeModel({
      model: "gemini-2.5-flash",
      // Esperamos texto puro, n√£o JSON!
      generationConfig: {
        responseMimeType: "text/plain",
      },
    });

    const result = await model.generateContent({
      contents: [{ role: "user", parts: [{ text: promptWithSources }] }],
    });

    const response = result.response;
    const modelAnswer = response.text(); // A resposta agora ter√° as duas se√ß√µes

    console.log("üì© Resposta (texto puro) recebida do Gemini");

    // Etapa 4: Montar o JSON final manually (l√≥gica inalterada)
    // N√≥s combinamos a resposta do modelo com os links que j√° t√≠nhamos.
    const jsonData = {
      answer: modelAnswer.trim(),
      sources: linksArray, // Anexa os links que encontramos na Etapa 1
    };

    console.log("‚úÖ JSON final montado manualmente");

    return NextResponse.json(jsonData);
  } catch (error) {
    console.error("üö® Erro geral no processamento da rota /api/chat:", error);
    return NextResponse.json(
      {
        answer: "Ocorreu um erro interno ao processar sua solicita√ß√£o.",
        sources: [],
      },
      { status: 500 }
    );
  }
}